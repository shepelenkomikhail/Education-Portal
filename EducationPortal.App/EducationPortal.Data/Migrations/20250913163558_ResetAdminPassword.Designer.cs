// <auto-generated />
using System;
using EducationPortal.Data.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EducationPortal.Data.Migrations
{
    [DbContext(typeof(PortalDbContext))]
    [Migration("20250913163558_ResetAdminPassword")]
    partial class ResetAdminPassword
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("CourseMaterial", b =>
                {
                    b.Property<int>("CoursesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaterialsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CoursesId", "MaterialsId");

                    b.HasIndex("MaterialsId");

                    b.ToTable("CourseMaterial");
                });

            modelBuilder.Entity("CourseSkill", b =>
                {
                    b.Property<int>("CoursesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SkillsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CoursesId", "SkillsId");

                    b.HasIndex("SkillsId");

                    b.ToTable("CourseSkill");
                });

            modelBuilder.Entity("EducationPortal.Data.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 9, 13, 16, 35, 58, 144, DateTimeKind.Utc).AddTicks(2520),
                            Description = "Learn the basics of C# programming language, including syntax, data types, and control structures.",
                            Name = "Introduction to C#"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 9, 13, 16, 35, 58, 144, DateTimeKind.Utc).AddTicks(2530),
                            Description = "Build modern web applications using ASP.NET Core framework and Entity Framework.",
                            Name = "Web Development with ASP.NET Core"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 9, 13, 16, 35, 58, 144, DateTimeKind.Utc).AddTicks(2530),
                            Description = "Master JavaScript basics, DOM manipulation, and modern ES6+ features.",
                            Name = "JavaScript Fundamentals"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 9, 13, 16, 35, 58, 144, DateTimeKind.Utc).AddTicks(2530),
                            Description = "Learn database design principles and SQL querying techniques.",
                            Name = "Database Design with SQL"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 9, 13, 16, 35, 58, 144, DateTimeKind.Utc).AddTicks(2530),
                            Description = "Build interactive user interfaces with React library and modern JavaScript.",
                            Name = "React for Beginners"
                        });
                });

            modelBuilder.Entity("EducationPortal.Data.Models.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Materials");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("EducationPortal.Data.Models.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "C#"
                        },
                        new
                        {
                            Id = 2,
                            Name = "JavaScript"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Python"
                        },
                        new
                        {
                            Id = 4,
                            Name = "SQL"
                        },
                        new
                        {
                            Id = 5,
                            Name = "HTML/CSS"
                        },
                        new
                        {
                            Id = 6,
                            Name = "React"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Entity Framework"
                        },
                        new
                        {
                            Id = 8,
                            Name = "ASP.NET Core"
                        });
                });

            modelBuilder.Entity("EducationPortal.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5c06f3f8-aebc-4ec6-b381-c6bc1557bfd9",
                            Email = "admin@educationportal.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EDUCATIONPORTAL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEHy8X5U7Q8X5U7Q8X5U7Q8X5U7Q8X5U7Q8X5U7Q8X5U7Q8X5U7Q8X5U7Q8X5U7Q==",
                            PhoneNumber = "+1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "81e6b56d-e891-484d-bcf6-84027862f26f",
                            Surname = "User",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e6054b99-f589-4071-a38f-0a37d8b2548c",
                            Email = "jane.smith@email.com",
                            EmailConfirmed = false,
                            FirstName = "Jane",
                            LockoutEnabled = false,
                            PasswordHash = "password123",
                            PhoneNumber = "+1234567891",
                            PhoneNumberConfirmed = false,
                            Surname = "Smith",
                            TwoFactorEnabled = false,
                            UserName = "Jane"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "09aadba0-dc2e-4946-98a7-22ab304cf673",
                            Email = "bob.johnson@email.com",
                            EmailConfirmed = false,
                            FirstName = "Bob",
                            LockoutEnabled = false,
                            PasswordHash = "password123",
                            PhoneNumber = "+1234567892",
                            PhoneNumberConfirmed = false,
                            Surname = "Johnson",
                            TwoFactorEnabled = false,
                            UserName = "Bob"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8083c90d-d14e-435d-a1f8-23552247caeb",
                            Email = "alice.brown@email.com",
                            EmailConfirmed = false,
                            FirstName = "Alice",
                            LockoutEnabled = false,
                            PasswordHash = "password123",
                            PhoneNumber = "+1234567893",
                            PhoneNumberConfirmed = false,
                            Surname = "Brown",
                            TwoFactorEnabled = false,
                            UserName = "Alice"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5ebfb62e-7909-43f0-a301-80a0cb41509c",
                            Email = "charlie.wilson@email.com",
                            EmailConfirmed = false,
                            FirstName = "Charlie",
                            LockoutEnabled = false,
                            PasswordHash = "password123",
                            PhoneNumber = "+1234567894",
                            PhoneNumberConfirmed = false,
                            Surname = "Wilson",
                            TwoFactorEnabled = false,
                            UserName = "Charlie"
                        });
                });

            modelBuilder.Entity("EducationPortal.Data.Models.UserCourse", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompletionPercentage")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("UserCourses");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CourseId = 1,
                            CompletionPercentage = 0
                        },
                        new
                        {
                            UserId = 1,
                            CourseId = 2,
                            CompletionPercentage = 0
                        },
                        new
                        {
                            UserId = 2,
                            CourseId = 1,
                            CompletionPercentage = 0
                        },
                        new
                        {
                            UserId = 2,
                            CourseId = 3,
                            CompletionPercentage = 0
                        },
                        new
                        {
                            UserId = 3,
                            CourseId = 2,
                            CompletionPercentage = 0
                        },
                        new
                        {
                            UserId = 3,
                            CourseId = 4,
                            CompletionPercentage = 0
                        },
                        new
                        {
                            UserId = 4,
                            CourseId = 3,
                            CompletionPercentage = 0
                        },
                        new
                        {
                            UserId = 4,
                            CourseId = 5,
                            CompletionPercentage = 0
                        },
                        new
                        {
                            UserId = 5,
                            CourseId = 1,
                            CompletionPercentage = 0
                        },
                        new
                        {
                            UserId = 5,
                            CourseId = 5,
                            CompletionPercentage = 0
                        });
                });

            modelBuilder.Entity("EducationPortal.Data.Models.UserMaterial", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaterialId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "MaterialId");

                    b.HasIndex("MaterialId");

                    b.ToTable("UserMaterials");
                });

            modelBuilder.Entity("EducationPortal.Data.Models.UserSkill", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SkillId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SkillLevel")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("UserSkills");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            SkillId = 1,
                            SkillLevel = 0
                        },
                        new
                        {
                            UserId = 1,
                            SkillId = 7,
                            SkillLevel = 0
                        },
                        new
                        {
                            UserId = 2,
                            SkillId = 3,
                            SkillLevel = 0
                        },
                        new
                        {
                            UserId = 2,
                            SkillId = 5,
                            SkillLevel = 0
                        },
                        new
                        {
                            UserId = 3,
                            SkillId = 2,
                            SkillLevel = 0
                        },
                        new
                        {
                            UserId = 3,
                            SkillId = 4,
                            SkillLevel = 0
                        },
                        new
                        {
                            UserId = 4,
                            SkillId = 6,
                            SkillLevel = 0
                        },
                        new
                        {
                            UserId = 4,
                            SkillId = 5,
                            SkillLevel = 0
                        },
                        new
                        {
                            UserId = 5,
                            SkillId = 1,
                            SkillLevel = 0
                        },
                        new
                        {
                            UserId = 5,
                            SkillId = 8,
                            SkillLevel = 0
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FriendlyName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Xml")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DataProtectionKeys");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "056320a1-0590-4673-b333-1508948bf6c9",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "2f2db4ea-0a97-42a2-b824-a27261e63eb9",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EducationPortal.Data.Models.Article", b =>
                {
                    b.HasBaseType("EducationPortal.Data.Models.Material");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Resource")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("Articles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 7,
                            Title = "Getting Started with Entity Framework",
                            Date = new DateTime(2023, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Resource = "Microsoft Docs"
                        },
                        new
                        {
                            Id = 8,
                            Title = "Best Practices for C# Development",
                            Date = new DateTime(2023, 5, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Resource = "Stack Overflow Blog"
                        },
                        new
                        {
                            Id = 9,
                            Title = "Modern JavaScript Patterns",
                            Date = new DateTime(2023, 4, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Resource = "MDN Web Docs"
                        });
                });

            modelBuilder.Entity("EducationPortal.Data.Models.Book", b =>
                {
                    b.HasBaseType("EducationPortal.Data.Models.Material");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Formant")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PageAmount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("TEXT");

                    b.ToTable("Books", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "C# Programming Guide",
                            Author = "Microsoft",
                            Formant = "PDF",
                            PageAmount = 450,
                            PublicationDate = new DateTime(2023, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Title = "Entity Framework Core",
                            Author = "Jon P Smith",
                            Formant = "PDF",
                            PageAmount = 380,
                            PublicationDate = new DateTime(2023, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Title = "JavaScript: The Good Parts",
                            Author = "Douglas Crockford",
                            Formant = "PDF",
                            PageAmount = 172,
                            PublicationDate = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("EducationPortal.Data.Models.Video", b =>
                {
                    b.HasBaseType("EducationPortal.Data.Models.Material");

                    b.Property<int>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quality")
                        .HasColumnType("INTEGER");

                    b.ToTable("Videos", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 4,
                            Title = "C# Tutorial for Beginners",
                            Duration = 120,
                            Quality = 1080
                        },
                        new
                        {
                            Id = 5,
                            Title = "ASP.NET Core MVC Tutorial",
                            Duration = 180,
                            Quality = 720
                        },
                        new
                        {
                            Id = 6,
                            Title = "JavaScript ES6 Features",
                            Duration = 90,
                            Quality = 1080
                        });
                });

            modelBuilder.Entity("CourseMaterial", b =>
                {
                    b.HasOne("EducationPortal.Data.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationPortal.Data.Models.Material", null)
                        .WithMany()
                        .HasForeignKey("MaterialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseSkill", b =>
                {
                    b.HasOne("EducationPortal.Data.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationPortal.Data.Models.Skill", null)
                        .WithMany()
                        .HasForeignKey("SkillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EducationPortal.Data.Models.Course", b =>
                {
                    b.HasOne("EducationPortal.Data.Models.User", "CreatedBy")
                        .WithMany("CreatedCourses")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("EducationPortal.Data.Models.UserCourse", b =>
                {
                    b.HasOne("EducationPortal.Data.Models.Course", "Course")
                        .WithMany("UserCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationPortal.Data.Models.User", "User")
                        .WithMany("UserCourses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EducationPortal.Data.Models.UserMaterial", b =>
                {
                    b.HasOne("EducationPortal.Data.Models.Material", "Material")
                        .WithMany("UserMaterials")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationPortal.Data.Models.User", "User")
                        .WithMany("UserMaterials")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EducationPortal.Data.Models.UserSkill", b =>
                {
                    b.HasOne("EducationPortal.Data.Models.Skill", "Skill")
                        .WithMany("UserSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationPortal.Data.Models.User", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("EducationPortal.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("EducationPortal.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationPortal.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("EducationPortal.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EducationPortal.Data.Models.Article", b =>
                {
                    b.HasOne("EducationPortal.Data.Models.Material", null)
                        .WithOne()
                        .HasForeignKey("EducationPortal.Data.Models.Article", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EducationPortal.Data.Models.Book", b =>
                {
                    b.HasOne("EducationPortal.Data.Models.Material", null)
                        .WithOne()
                        .HasForeignKey("EducationPortal.Data.Models.Book", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EducationPortal.Data.Models.Video", b =>
                {
                    b.HasOne("EducationPortal.Data.Models.Material", null)
                        .WithOne()
                        .HasForeignKey("EducationPortal.Data.Models.Video", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EducationPortal.Data.Models.Course", b =>
                {
                    b.Navigation("UserCourses");
                });

            modelBuilder.Entity("EducationPortal.Data.Models.Material", b =>
                {
                    b.Navigation("UserMaterials");
                });

            modelBuilder.Entity("EducationPortal.Data.Models.Skill", b =>
                {
                    b.Navigation("UserSkills");
                });

            modelBuilder.Entity("EducationPortal.Data.Models.User", b =>
                {
                    b.Navigation("CreatedCourses");

                    b.Navigation("UserCourses");

                    b.Navigation("UserMaterials");

                    b.Navigation("UserSkills");
                });
#pragma warning restore 612, 618
        }
    }
}
